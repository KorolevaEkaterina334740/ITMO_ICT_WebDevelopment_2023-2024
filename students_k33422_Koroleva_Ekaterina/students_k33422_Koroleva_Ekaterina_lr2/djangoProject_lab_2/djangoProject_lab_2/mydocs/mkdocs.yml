site_name: My Docs
Документация по настройкам и URL-адресам DjangoProject_lab_2
Этот документ предоставляет обзор настроек и URL-адресов Django для проекта djangoProject_lab_2. Эти настройки автоматически генерируются командой django-admin startproject с использованием Django версии 4.2.7.

SECRET_KEY: Храните секретный ключ, используемый в продакшене, в секрете! Этот ключ используется для криптографического подписывания и не должен быть раскрыт.
Режим отладки
DEBUG: Установите True для разработки. Не используйте режим отладки в продакшене.
Установленные приложения
INSTALLED_APPS: Список установленных приложений Django, включая 'air_travel' для этого проекта.
Промежуточное программное обеспечение
MIDDLEWARE: Список классов промежуточного программного обеспечения для обработки запросов/ответов.
Конфигурация базы данных
База данных SQLite
DATABASES: Конфигурация для базы данных SQLite по умолчанию.
Проверка паролей
Проверка паролей
AUTH_PASSWORD_VALIDATORS: Список валидаторов паролей для обеспечения безопасности.
Интернационализация и локализация
Язык и часовой пояс
LANGUAGE_CODE: Установлен как 'ru-ru' для русского языка.
TIME_ZONE: По умолчанию установлен 'UTC'.
Настройки локализации
USE_I18N: Включить интернационализацию.
USE_TZ: Включить поддержку часовых поясов.
Конфигурация статических файлов
Статические файлы
STATIC_URL: Префикс URL для обслуживания статических файлов.
STATICFILES_DIRS: Список каталогов, содержащих статические файлы.
Тип поля первичного ключа по умолчанию
Поле автоинкремента
DEFAULT_AUTO_FIELD: Тип поля первичного ключа по умолчанию, установлен как 'django.db.models.BigAutoField'.
Пользовательская модель пользователя
Пользовательская модель пользователя
AUTH_USER_MODEL: Установлен как 'air_travel.CustomUser' для пользовательской модели пользователя.
Конфигурация URL-адресов
Административная и приложенческие URL-адреса
urlpatterns: Список шаблонов URL-адресов для проекта.
'/admin/': Интерфейс администратора.
'': Включает шаблоны URL-адресов из 'air_travel.urls'.
python
Copy code
from django.urls import path, include
from django.contrib import admin

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('air_travel.urls')),
]

Документация по моделям DjangoProject_lab_2
Этот раздел документации предоставляет обзор моделей, определенных в проекте djangoProject_lab_2. Эти модели предназначены для аутентификации пользователей, хранения информации о рейсах, бронированиях и комментариях.

Пользовательская модель
Модель CustomUser
Поля:
username: Унаследовано от AbstractUser.
password: Унаследовано от AbstractUser.
email: Унаследовано от AbstractUser.
first_name: CharField с максимальной длиной 30, допускает пустое значение.
last_name: CharField с максимальной длиной 30, допускает пустое значение.
birth_date: DateTimeField, допускает пустое значение.
Методы:
__str__(self): Возвращает строковое представление пользователя, объединяя имя и фамилию.
Meta:
db_table: Устанавливает имя таблицы в базе данных как 'user'.
Модель рейса
Модель Flight
Поля:
company_name: CharField с максимальной длиной 30, обязательное поле.
gate: CharField с максимальной длиной 30, обязательное поле.
plane_number: CharField с максимальной длиной 30, обязательное поле.
date_arrivals: DateTimeField, допускает пустое значение.
date_departures: DateTimeField, допускает пустое значение.
seat_place: IntegerField.
Методы:
__str__(self): Возвращает строковое представление рейса, используя его ID.
Модель бронирования
Модель Booking
Поля:
user: ForeignKey к CustomUser с параметром on_delete=models.DO_NOTHING.
flight: ForeignKey к Flight с параметром on_delete=models.CASCADE.
Методы:
__str__(self): Возвращает строковое представление бронирования, объединяя имя пользователя и ID рейса.
Модель комментариев
Модель Comments
Поля:
text: CharField с максимальной длиной 500, допускает пустое значение.
rate: IntegerField, обязательное поле.
booking: ForeignKey к Booking с параметром on_delete=models.DO_NOTHING.
Методы:
__str__(self): Возвращает строковое представление комментария.


Документация к Views в DjangoProject_lab_2
Класс Main (Главная страница)
Main(View)
Этот класс представляет главную страницу приложения.

Методы:

get(self, request): Обрабатывает GET-запрос и отображает все рейсы на главной странице.
Класс RegisterPassenger (Регистрация пассажира)
RegisterPassenger(View)
Этот класс отвечает за процесс регистрации нового пассажира.

Методы:

get(self, request): Обрабатывает GET-запрос и возвращает форму для регистрации пассажира.
post(self, request): Обрабатывает POST-запрос с данными формы, проводит валидацию и, при успешной регистрации, авторизует пользователя и перенаправляет на главную страницу.
Класс AuthUser (Аутентификация пользователя)
AuthUser(LoginView)
Этот класс представляет страницу аутентификации пользователя.

Поля:

template_name: Указывает на шаблон страницы аутентификации.
next_page: Указывает на страницу, на которую будет перенаправлен пользователь после успешной аутентификации.
Класс LogOut (Выход из системы)
LogOut(LogoutView)
Этот класс реализует выход пользователя из системы.

Поля:

next_page: Указывает на страницу, на которую будет перенаправлен пользователь после выхода.
Класс UserProfile (Профиль пользователя)
UserProfile(View)
Этот класс представляет страницу профиля пользователя.

Методы:

get(self, request): Обрабатывает GET-запрос и возвращает информацию о бронированиях пользователя.
Класс EditBooking (Редактирование бронирования)
EditBooking(UpdateView)
Этот класс предоставляет возможность редактирования бронирования.

Поля:

model: Указывает модель для редактирования.
fields: Указывает на редактируемые поля в форме.
template_name: Указывает на шаблон страницы редактирования.
success_url: Указывает на страницу, на которую будет перенаправлен пользователь после успешного редактирования.
Класс DeleteBooking (Удаление бронирования)
DeleteBooking(DeleteView)
Этот класс реализует удаление бронирования.

Поля:

model: Указывает модель для удаления.
success_url: Указывает на страницу, на которую будет перенаправлен пользователь после успешного удаления.
template_name: Указывает на шаблон страницы подтверждения удаления.
Класс DetailFlight (Подробная информация о рейсе)
DetailFlight(DetailView)
Этот класс предоставляет подробную информацию о конкретном рейсе.

Поля:

model: Указывает модель для отображения подробной информации.
template_name: Указывает на шаблон страницы подробной информации.
Методы:

get_context_data(self, **kwargs): Добавляет дополнительные данные в контекст страницы, такие как сам рейс, комментарии пользователей и форма для добавления нового комментария.
post(self, request, pk): Обрабатывает POST-запрос для добавления нового комментария, если рейс уже завершен.
Класс DetailFlightForBooking (Подробная информация о рейсе для бронирования)
DetailFlightForBooking(DetailView)
Этот класс предоставляет подробную информацию о рейсе для бронирования.

Поля:

model: Указывает модель для отображения подробной информации.
template_name: Указывает на шаблон страницы подробной информации для бронирования.
Методы:

get_context_data(self, **kwargs): Добавляет дополнительные данные в контекст страницы, такие как сам р


Документация к urlpatterns в DjangoProject_lab_2
Пути URL-адресов
Главная страница
'/': Главная страница приложения.
views.Main.as_view(): Класс, отвечающий за отображение главной страницы.
name='main_page': Имя URL для обращения к этому пути.
Регистрация пассажира
'register/': Страница регистрации пассажира.
views.RegisterPassenger.as_view(): Класс, отвечающий за регистрацию нового пассажира.
name='register': Имя URL для обращения к этому пути.
Аутентификация пользователя
'login/': Страница аутентификации пользователя.
views.AuthUser.as_view(): Класс, представляющий страницу аутентификации.
name='login': Имя URL для обращения к этому пути.
Выход из системы
'logout/': Страница выхода из системы.
views.LogOut.as_view(): Класс, реализующий выход пользователя.
name='logout': Имя URL для обращения к этому пути.
Профиль пользователя
'profile/': Страница профиля пользователя.
views.UserProfile.as_view(): Класс, представляющий страницу профиля пользователя.
name='profile': Имя URL для обращения к этому пути.
Редактирование бронирования
'edit_booking/<int:pk>/': Страница редактирования бронирования.
views.EditBooking.as_view(): Класс, предоставляющий функционал редактирования бронирования.
name='edit_booking': Имя URL для обращения к этому пути.
Удаление бронирования
'delete_booking/<int:pk>/': Страница удаления бронирования.
views.DeleteBooking.as_view(): Класс, реализующий функционал удаления бронирования.
name='delete_booking': Имя URL для обращения к этому пути.
Подробная информация о рейсе
'detail_flight/<int:pk>/': Страница с подробной информацией о рейсе.
views.DetailFlight.as_view(): Класс, предоставляющий информацию о конкретном рейсе.
name='detail_flight': Имя URL для обращения к этому пути.
Подробная информация о рейсе для бронирования
'detail_flight_for_booking/<int:pk>/': Страница с подробной информацией о рейсе для бронирования.
views.DetailFlightForBooking.as_view(): Класс, предоставляющий информацию о рейсе для бронирования.
name='detail_flight_for_booking': Имя URL для обращения к этому пути.
